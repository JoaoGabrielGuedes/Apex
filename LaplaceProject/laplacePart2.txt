//Laplace continuation because even html can't take such a mess
//Strings
String hi = 'Hello World!';
String explainying = 'I\'m studying Salesforce Apex Salesforce!\n So I decided to create this code for apply my knowledge in the framework.\n This will be probaly long and useless for anyone other than me :D';
String bTw = 'I will be refactoring from time to time, so dont worry :D';
String alphabetSix = 'abcdef';
String alphabetNextSix = 'ghijkl';
String sameAlphabet = 'abcdef';
String sameAlphabetDivided = 'abc';
String alphabetIntersection = 'defghi';
String sameAlphabetWithCase = 'ABCDEF';
String sameAlphabetWithSpace = 'a b c d e f';
String sameAlphabetWithSpaceTwo = '   a b c d e f   ';
String sameAlphabetWithSpaceThree = ' a                b c d e f';
String sameAlphabetWithRepeat = 'abcdefabcdef';
String sameAlphabetWithNumbers = 'abcdef 27';
String sameAlphabetWithNumbersWithoutSpace = 'abcdef27';
String especialAlphabet = 'aA$Bb';
String stringValueFifthteen = '001D000000Ju1zH';
String stringComma = 'String1, "String2"';
String originalHtmlFour = '"<Black&White>"';
String escapeEcmaOne = '"grade": 3.9/4.0';
String escapeJavaOne = 'Company: "Salesforce.com"';
String escapeSinglesQuotesOne = '\'Hello Jason\'';
String escapeUnicodeOne = 'De onde você é?';
String templateformat = '{0} was last updated {1}';
String getLevenshteinDistanceJoe = 'Hello Joe';
String getLevenshteinDistanceJane = 'Hello Jane';
String asciiTable = 'abcd1234!@#$%^&*()`~-_+={[}]|:<,>.?';
String notAsciiTable = '√';
String blank = '';
String nullString = null;
String whitespace = '  ';
String numeric = '1234567890';
String decimalPoint = '1.2';
String numericSpace = '1 2 3';
String theyLoveOmega = '\u03A9 is Ω (Omega)';
String theyReallyLoveOmega = 'Ω and \u03A9 and Ω';
String target = 'bc';
String replacement = 'xy';
String regExp = '[a-z]';
String replacementTwo = '1';
String regExpTwo = '[a-z]{6}';
String replacementThree = 'f';

//Objects
Object objectOne = 'abcdef';

//Integers
Integer objectTwo = 300;

//Id's
Id idValueFifthteen = '001D000000Ju1zH';
Id idValueEitghteen = '001D000000Ju1zHIAR';

//Lists
List<Object> parameters = new List<Object> {'Universal Containers', DateTime.newInstance(2023, 04, 21) };
List<Integer> charArr= new Integer[]{74}; //J in ASCII
List<String> commonPrefixOne = new List<String>{'System.debug', 'System.assert', 'System.assertEquals'};
List<Integer> joinOne = new List<Integer> {10, 20, 30};

//getLevenshteinDistance
Integer getLevenshteinDistanceOne = getLevenshteinDistanceJoe.getLevenshteinDistance('Hello Max');
System.assertEquals(3, getLevenshteinDistanceOne);
Integer getLevenshteinDistanceTwo = getLevenshteinDistanceJane.getLevenshteinDistance('Hello Max', 2);
System.assertEquals(-1, getLevenshteinDistanceTwo);

//indexOf
Integer sameAlphabetContained = alphabetSix.indexOf(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetContained);

//hashCode - I get it but can't manipulate it so I need to study further
public class MyCustomClass {
   String x,y;
   // Provide a custom hash code
   public Integer hashCode() {
    return 
    (31*x.hashCode())^(y.hashCode());
   }
}

//indexOf - I need to study further
Integer sameAlphabetIndexOne = alphabetSix.indexOf(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetIndexOne);

Integer sameAlphabetIndexTwo = alphabetSix.indexOf(sameAlphabetDivided, 2);
System.assertEquals(-1, sameAlphabetIndexTwo);

Integer sameAlphabetIndexThree = alphabetSix.indexOfAny(alphabetNextSix);
System.assertEquals(-1, sameAlphabetIndexThree);

Integer sameAlphabetIndexFour = alphabetSix.indexOfAny(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetIndexFour);

Integer sameAlphabetIndexFive = alphabetSix.indexOfAnyBut(sameAlphabetDivided);
System.assertEquals(3, sameAlphabetIndexFive);

System.debug('indexOfChar(937)=' +alphabetSix.indexOfChar(937));

Integer sameAlphabetIndexSix = alphabetSix.indexOfDifference(sameAlphabetDivided);
System.assertEquals(3, sameAlphabetIndexSix);

Integer sameAlphabetIndexSeven = alphabetSix.indexOfIgnoreCase(sameAlphabetWithCase, 0);
System.assertEquals(0, sameAlphabetIndexSeven);

//isAllLowerCase 
System.assert(alphabetSix.isAllLowerCase());

//isAllUpperCase
System.assert(sameAlphabetWithCase.isAllUpperCase());

//isAlpha
Boolean alphabetSixAlpha = alphabetSix.isAlpha();
System.assertEquals(true, alphabetSixAlpha);

Boolean alphabetSixAlphaTwo = sameAlphabetWithNumbers.isAlpha();
System.assertEquals(false, alphabetSixAlphaTwo);

System.assert(alphabetSix.isAlphaSpace());

System.assert(!sameAlphabetWithNumbers.isAlphaSpace());

System.assert(!especialAlphabet.isAlphaSpace());

Boolean sameAlphabetWithNumbersWithoutSpaceOne = sameAlphabetWithNumbersWithoutSpace.isAlphanumeric();
System.assertEquals(true, sameAlphabetWithNumbersWithoutSpaceOne);

System.assert(sameAlphabetWithNumbers.isAlphanumericSpace());

//isAsciiPrintable
System.assert(asciiTable.isAsciiPrintable());
System.assert(!notAsciiTable.isAsciiPrintable());

//isBlank and isNotBlank
System.assert(String.isBlank(blank));
System.assert(String.isBlank(nullString));
System.assert(String.isBlank(whitespace));
System.assert(!String.isBlank(hi));

System.assert(String.isNotBlank(hi));
System.assert(!String.isNotBlank(blank));
System.assert(!String.isNotBlank(nullString));
System.assert(!String.isNotBlank(whitespace));

//isEmpty and isNotEmpty
System.assert(String.isEmpty(blank));
System.assert(String.isEmpty(nullString));
System.assert(!String.isEmpty(whitespace));
System.assert(!String.isEmpty(hi));

System.assert(String.isNotEmpty(hi));
System.assert(!String.isNotEmpty(blank));
System.assert(!String.isNotEmpty(nullString));
System.assert(String.isNotEmpty(whitespace));

//isNumeric and isNumericspace
System.assert(numeric.isNumeric());
System.assert(!sameAlphabetWithNumbersWithoutSpace.isNumeric());
System.assert(!decimalpoint.isNumeric());

System.assert(numericSpace.isNumericspace());
System.assert(!sameAlphabetWithNumbers.isNumericspace());

//isWhitespace
System.assert(whitespace.isWhitespace());
System.assert(blank.isWhitespace());
System.assert(!sameAlphabetWithNumbersWithoutSpace.isWhitespace());

//join
String joinStringOne = String.join(joinOne, '/');
System.assertEquals('10/20/30', joinStringOne);
System.debug(joinStringOne);

//lastIndex
Integer lastIndexOfOne = alphabetSix.lastIndexOf('c');
System.assertEquals(2, lastIndexOfOne);

Integer lastIndexOfTwo = alphabetSix.lastIndexOf('c', 7);
System.assertEquals(2, lastIndexOfTwo);
Integer lastIndexOfThree = alphabetSix.lastIndexOf('c', 2);
System.assertEquals(2, lastIndexOfThree);


System.assertEquals(5, theyLoveOmega.lastIndexOfChar(937));

System.assertEquals(12, theyReallyLoveOmega.lastIndexOfChar(937));
System.assertEquals(6, theyReallyLoveOmega.lastIndexOfChar(937,11));
System.assertEquals(0, theyReallyLoveOmega.lastIndexOfChar(937,5));

Integer lastIndexOfFour = alphabetSix.lastIndexOfIgnoreCase('BCDE');
System.assertEquals(1, lastIndexOfFour);

Integer lastIndexOfFive = alphabetSix.lastIndexOfIgnoreCase('C', 7);
System.assertEquals(2, lastIndexOfFive);

//left
String alphabetLeft = alphabetSix.left(3);
System.assertEquals('abc', alphabetLeft);
String alphabetLeftPadded = alphabetLeft.leftPad(5);
System.assertEquals('  abc', alphabetLeftPadded);

//length
Integer alphabetLength = alphabetSix.length();
System.assertEquals(alphabetLength, 6);

//mid
String alphabetMid = alphabetSix.mid(2, 4);
System.assertEquals('cdef', alphabetMid);

//normalizeSpace
String sameAlphabetWithSpaceNormalizeSpace = sameAlphabetWithSpaceThree.normalizeSpace();
System.assertEquals('a b c d e f', sameAlphabetWithSpaceNormalizeSpace);

