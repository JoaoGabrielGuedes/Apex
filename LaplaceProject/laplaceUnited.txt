//Laplace continuation because even html can't take such a mess
//Strings
String hi = 'Hello World!';
String explainying = 'I\'m studying Salesforce Apex Salesforce!\n So I decided to create this code for apply my knowledge in the framework.\n This will be probaly long and useless for anyone other than me :D';
String bTw = 'I will be refactoring from time to time, so dont worry :D';
String alphabetSix = 'abcdef';
String alphabetNextSix = 'ghijkl';
String sameAlphabet = 'abcdef';
String sameAlphabetDivided = 'abc';
String alphabetIntersection = 'defghi';
String sameAlphabetWithCase = 'ABCDEF';
String sameAlphabetWithSpace = 'a b c d e f';
String sameAlphabetWithRepeat = 'abcdefabcdef';
String sameAlphabetWithNumbers = 'abcdef 27';
String sameAlphabetWithNumbersWithoutSpace = 'abcdef27';
String especialAlphabet = 'aA$Bb';
String stringValueFifthteen = '001D000000Ju1zH';
String stringComma = 'String1, "String2"';
String originalHtmlFour = '"<Black&White>"';
String escapeEcmaOne = '"grade": 3.9/4.0';
String escapeJavaOne = 'Company: "Salesforce.com"';
String escapeSinglesQuotesOne = '\'Hello Jason\'';
String escapeUnicodeOne = 'De onde você é?';
String templateformat = '{0} was last updated {1}';
String getLevenshteinDistanceJoe= 'Hello Joe';
String getLevenshteinDistanceJane = 'Hello Jane';
String asciiTable = 'abcd1234!@#$%^&*()`~-_+={[}]|:<,>.?';
String notAsciiTable = '√';
String blank = '';
String nullString = null;
String whitespace = '  ';
String numeric = '1234567890';
String decimalPoint = '1.2';
String numericSpace = '1 2 3';
String theyLoveOmega = '\u03A9 is Ω (Omega)';
String theyReallyLoveOmega = 'Ω and \u03A9 and Ω';

//Objects
Object objectOne = 'abcdef';

//Integers
Integer objectTwo = 300;

//Id's
Id idValueFifthteen = '001D000000Ju1zH';
Id idValueEitghteen = '001D000000Ju1zHIAR';

//Lists
List<Object> parameters = new List<Object> {'Universal Containers', DateTime.newInstance(2023, 04, 21) };
List<Integer> charArr= new Integer[]{74}; //J in ASCII
List<String> commonPrefixOne = new List<String>{'System.debug', 'System.assert', 'System.assertEquals'};
List<Integer> joinOne = new List<Integer> {10, 20, 30};

System.debug(hi);
System.debug(explainying);
System.debug(bTw);

//primitive data types
Boolean isThisAdream = false;
System.debug(isThisAdream);

Integer universeAndLifeNumber = 42;
System.debug(universeAndLifeNumber);

Long guessWhat = 0110111001101111L;
System.debug(guessWhat);

Double pi = 6.28318530717958647692/2;
System.debug(pi);

Date bestDay = Date.newInstance(1996, 2, 11);
System.debug(bestDay);

Time currentTime = Time.newInstance(21, 47, 0, 0);
System.debug(currentTime);

DateTime currentDateTime = DateTime.newInstance(2023, 4, 20, 21, 47, 0);
System.debug(currentDateTime);

//a list with something I know
List<String> knowledge = new List<String>{'System.debug', 'Seven', 'Potato', 'Class'};
  knowledge.add('List'); 
  knowledge.add('Map');
  knowledge.add('Add');
  knowledge.add('Remove');
  knowledge.remove(2);
  knowledge.set(1, 'Set');
System.debug(knowledge);

//This is null?

String iAm;
System.debug(iAm);

Boolean sleepy;
System.debug(sleepy);

Integer but;
System.debug(but);

Long my;
System.debug(my);

Double study;
System.debug(study);

Date willNot;
System.debug(willNot);

Time stop;
System.debug(stop);

String whatIs = 'Why do I find this funny? Hahahaha';
String capitalizeIsSelfish = 'i will creat this just for capitalize';
System.debug('Actual String: ' +whatIs);

//abbreviate and Abbreviate plus offset
System.debug('This is a abbreviated String: ' +whatIs.abbreviate(20));
System.debug('This is a abbreviated² String: ' +whatIs.abbreviate(10));
System.debug('This is a abbreviated³ String: ' +whatIs.abbreviate(5));
System.debug('I dont know what this is anymore: ' +whatIs.abbreviate(4)); //nevermind, there is a min of 4 letters                        
System.debug(whatIs.abbreviate(10,5)); //offset

//uncapitalize
System.debug('Actual String: ' +whatIs);
System.debug('Uncapitalized String: ' +whatIs.uncapitalize());
System.debug('If I call it again will be uncapitalizade? I guess that will not but here it is: ' +whatIs);

//capitalize
System.debug('Actual String: ' +capitalizeIsSelfish);
System.debug('Capitalize: ' +capitalizeIsSelfish.capitalize());

//center
String whatsThat = 'This';
System.debug(whatsThat.center(30));

//padded
System.debug(whatsThat.center(10, '-'));

//charAt
System.debug(hi.charAt(6)); //return value of the character ASCII

//codePointAt - I need to study this further
System.debug(hi.codePointAt(6));

//codePointBefore - This too
System.debug(hi.codePointBefore(6));

//codePointBefore - ....
System.debug(hi.codePointCount(6,10));

//compareTo
Integer result = 
    alphabetSix.compareTo(alphabetNextSix);
System.assertEquals(result, -6);

Integer resultTwo = 
    alphabetSix.compareTo(sameAlphabet);
System.assertEquals(resultTwo, 0);

Integer resultThree = 
    alphabetSix.compareTo(alphabetIntersection);
System.assertEquals(resultThree, -3);

//contains
Boolean resultBool =
    alphabetSix.contains(sameAlphabet);
System.assertEquals(resultBool, true);

//containsAny
Boolean resultBoolTwo =
    alphabetSix.containsAny(alphabetIntersection);
System.assertEquals(resultBoolTwo, true);

Boolean resultBoolThree =
    alphabetSix.containsAny(alphabetNextSix);
System.assertEquals(resultBoolThree, false);

//containsIgnoreCase
Boolean resultBoolFour =
    alphabetSix.containsIgnoreCase(sameAlphabetWithCase);
System.assertEquals(resultBoolFour, true);

//containsNone
Boolean resultBoolFive =
    alphabetSix.containsNone(alphabetNextSix);
System.assertEquals(resultBoolFive, true);

//containsOnly
Boolean resultBoolSix =
    alphabetSix.containsOnly('abc');
System.assertEquals(resultBoolSix, false);

Boolean resultBoolSeven =
    alphabetSix.containsOnly('abcfgh');
System.assertEquals(resultBoolSeven, false);

Boolean resultBoolEight =
    alphabetSix.containsOnly('abcdef');
System.assertEquals(resultBoolEight, true);

//containsWhiteSpace
System.assert(sameAlphabetWithSpace.containsWhitespace());

//countMatches
System.assertEquals(1, alphabetSix.countMatches('abcdef'));
System.assertEquals(2, sameAlphabetWithRepeat.countMatches('abcdef'));

//deleteWhitespace
System.assertEquals(alphabetSix, sameAlphabetWithSpace.deleteWhitespace());

//difference
String alphabetDifference = 
   alphabetSix.difference('abcxyz');
System.assertEquals(
   'xyz',
   alphabetDifference);

//endsWith
System.assert(hi.endsWith('World!'));
System.assert(hi.endsWithIgnoreCase('world!'));

//compare a string to an object
Boolean resultEqualsObAlp = alphabetSix.equals(objectOne);
System.assertEquals(true, resultEqualsObAlp);

//compare a string to an object containing a number
Boolean resultEqualsObAlpThree = alphabetSix.equals(objectTwo);
System.assertEquals(false, resultEqualsObAlpThree);

//compare a string to an ID of the same length
//upper case is accounted
Boolean resultEqualsObAlpFour = stringValueFifthteen.equals(idValueFifthteen);
System.assertEquals(true, resultEqualsObAlpFour); 

//compare two equal ID values of different lengths
Boolean resultEqualsObAlpFive = stringValueFifthteen.equals(idValueEitghteen);
System.assertEquals(true, resultEqualsObAlpFive);

//compare while ignoring case
Boolean resultEqualsObAlpSix = 
alphabetSix.equalsIgnoreCase(sameAlphabetWithCase);
System.assertEquals(resultEqualsObAlpSix, true);

//escapeCsv - need to study further 
String stringCommaTwo = stringComma.escapeCsv();
System.assertEquals('"String1, ""String2"""', stringCommaTwo);

//escapeHtml4
String escapedHtmlFour = originalHtmlFour.escapeHtml4();
System.debug('Original HTML4 '+originalHtmlFour);
System.debug('Escaped HTML4 ' +escapedHtmlFour);

//escapeEcma
String escapedEcmaOne = escapeEcmaOne.escapeEcmaScript();
System.debug(escapedEcmaOne);
System.assertEquals('\\"grade\\": 3.9\\/4.0', escapedEcmaOne);

//escapeJava
String escapedJavaOne = escapeJavaOne.escapeJava();
System.assertEquals('Company: \\"Salesforce.com\\"', escapedJavaOne);

//escapeSingleQuotes
String escapedSinglesQuotesOne = String.escapeSingleQuotes(escapeSinglesQuotesOne);
System.debug(escapedSinglesQuotesOne); 
System.assertEquals('\\\'Hello Jason\\\'', escapedSinglesQuotesOne);

//escapeUnicode
String escapedUnicodeOne = escapeUnicodeOne.escapeUnicode();
System.assertEquals('De onde voc\\u00EA \\u00E9?', escapedUnicodeOne);

//escapeXml
String escapedXmlOne = originalHtmlFour.escapeXml();
System.debug(escapedXmlOne);

//Format - this will be further explored latter on
String templateformatted = String.format(templateformat, parameters);
System.debug ('Newly formatted string:' + templateformatted);

//fromCharArray
String convertedChar = String.fromCharArray(charArr);
System.assertEquals('J', convertedChar);

//getChars
Integer[] chars = hi.getChars();
System.assertEquals(72, chars[0]);

//getCommonPrefix
String prefixOne = String.getCommonPrefix(commonPrefixOne);
System.assertEquals('System.', prefixOne);

//getLevenshteinDistance
Integer getLevenshteinDistanceOne = getLevenshteinDistanceJoe.getLevenshteinDistance('Hello Max');
System.assertEquals(3, getLevenshteinDistanceOne);
Integer getLevenshteinDistanceTwo = getLevenshteinDistanceJane.getLevenshteinDistance('Hello Max', 2);
System.assertEquals(-1, getLevenshteinDistanceTwo);

//indexOf
Integer sameAlphabetContained = alphabetSix.indexOf(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetContained);

//hashCode - I get it but can't manipulate it so I need to study further
public class MyCustomClass {
   String x,y;
   // Provide a custom hash code
   public Integer hashCode() {
    return 
    (31*x.hashCode())^(y.hashCode());
   }
}

//indexOf - I need to study further
Integer sameAlphabetIndexOne = alphabetSix.indexOf(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetIndexOne);

Integer sameAlphabetIndexTwo = alphabetSix.indexOf(sameAlphabetDivided, 2);
System.assertEquals(-1, sameAlphabetIndexTwo);

Integer sameAlphabetIndexThree = alphabetSix.indexOfAny(alphabetNextSix);
System.assertEquals(-1, sameAlphabetIndexThree);

Integer sameAlphabetIndexFour = alphabetSix.indexOfAny(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetIndexFour);

Integer sameAlphabetIndexFive = alphabetSix.indexOfAnyBut(sameAlphabetDivided);
System.assertEquals(3, sameAlphabetIndexFive);

System.debug('indexOfChar(937)=' +alphabetSix.indexOfChar(937));

Integer sameAlphabetIndexSix = alphabetSix.indexOfDifference(sameAlphabetDivided);
System.assertEquals(3, sameAlphabetIndexSix);

Integer sameAlphabetIndexSeven = alphabetSix.indexOfIgnoreCase(sameAlphabetWithCase, 0);
System.assertEquals(0, sameAlphabetIndexSeven);

//isAllLowerCase 
System.assert(alphabetSix.isAllLowerCase());

//isAllUpperCase
System.assert(sameAlphabetWithCase.isAllUpperCase());

//isAlpha
Boolean alphabetSixAlpha = alphabetSix.isAlpha();
System.assertEquals(true, alphabetSixAlpha);

Boolean alphabetSixAlphaTwo = sameAlphabetWithNumbers.isAlpha();
System.assertEquals(false, alphabetSixAlphaTwo);

System.assert(alphabetSix.isAlphaSpace());

System.assert(!sameAlphabetWithNumbers.isAlphaSpace());

System.assert(!especialAlphabet.isAlphaSpace());

Boolean sameAlphabetWithNumbersWithoutSpaceOne = sameAlphabetWithNumbersWithoutSpace.isAlphanumeric();
System.assertEquals(true, sameAlphabetWithNumbersWithoutSpaceOne);

System.assert(sameAlphabetWithNumbers.isAlphanumericSpace());

//isAsciiPrintable
System.assert(asciiTable.isAsciiPrintable());
System.assert(!notAsciiTable.isAsciiPrintable());

//isBlank and isNotBlank
System.assert(String.isBlank(blank));
System.assert(String.isBlank(nullString));
System.assert(String.isBlank(whitespace));
System.assert(!String.isBlank(hi));

System.assert(String.isNotBlank(hi));
System.assert(!String.isNotBlank(blank));
System.assert(!String.isNotBlank(nullString));
System.assert(!String.isNotBlank(whitespace));

//isEmpty and isNotEmpty
System.assert(String.isEmpty(blank));
System.assert(String.isEmpty(nullString));
System.assert(!String.isEmpty(whitespace));
System.assert(!String.isEmpty(hi));

System.assert(String.isNotEmpty(hi));
System.assert(!String.isNotEmpty(blank));
System.assert(!String.isNotEmpty(nullString));
System.assert(String.isNotEmpty(whitespace));

//isNumeric and isNumericspace
System.assert(numeric.isNumeric());
System.assert(!sameAlphabetWithNumbersWithoutSpace.isNumeric());
System.assert(!decimalpoint.isNumeric());

System.assert(numericSpace.isNumericspace());
System.assert(!sameAlphabetWithNumbers.isNumericspace());

//isWhitespace
System.assert(whitespace.isWhitespace());
System.assert(blank.isWhitespace());
System.assert(!sameAlphabetWithNumbersWithoutSpace.isWhitespace());

//join
String joinStringOne = String.join(joinOne, '/');
System.assertEquals('10/20/30', joinStringOne);
System.debug(joinStringOne);

//lastIndex
Integer lastIndexOfOne = alphabetSix.lastIndexOf('c');
System.assertEquals(2, lastIndexOfOne);

Integer lastIndexOfTwo = alphabetSix.lastIndexOf('c', 7);
System.assertEquals(2, lastIndexOfTwo);
Integer lastIndexOfThree = alphabetSix.lastIndexOf('c', 2);
System.assertEquals(2, lastIndexOfThree);


System.assertEquals(5, theyLoveOmega.lastIndexOfChar(937));

System.assertEquals(12, theyReallyLoveOmega.lastIndexOfChar(937));
System.assertEquals(6, theyReallyLoveOmega.lastIndexOfChar(937,11));
System.assertEquals(0, theyReallyLoveOmega.lastIndexOfChar(937,5));

Integer lastIndexOfFour = alphabetSix.lastIndexOfIgnoreCase('BCDE');
System.assertEquals(1, lastIndexOfFour);

Integer lastIndexOfFive = alphabetSix.lastIndexOfIgnoreCase('C', 7);
System.assertEquals(2, lastIndexOfFive);

//left
String alphabetLeft = alphabetSix.left(3);
System.assertEquals('abc', alphabetLeft);
String alphabetLeftPadded = alphabetLeft.leftPad(5);
System.assertEquals('  abc', alphabetLeftPadded);

//length
Integer alphabetLength = alphabetSix.length();
System.assertEquals(alphabetLength, 6);

//mid
String alphabetMid = alphabetSix.mid(2, 4);
System.assertEquals('cdef', alphabetMid);

//normalizeSpace
String sameAlphabetWithSpaceNormalizeSpace = sameAlphabetWithSpaceThree.normalizeSpace();
System.assertEquals('a b c d e f', sameAlphabetWithSpaceNormalizeSpace);

//offsetByCodePoints
System.assertEquals(4, sameAlphabet.offsetByCodePoints(0,4)); //need to study

//remove
String escapeJavaOneRemove = escapeJavaOne.remove('force');
System.assertEquals('Company: "Sales.com"', escapeJavaOneRemove);

String escapeJavaOneRemoveJustIfEndedWith = escapeJavaOne.removeEnd('force');
System.assertEquals('Company: "Salesforce.com"', escapeJavaOneRemoveJustIfEndedWith);

String escapeJavaOneRemoveJustIfEndedWithTwo = escapeJavaOne.removeEnd('.com"');
System.assertEquals('Company: "Salesforce', escapeJavaOneRemoveJustIfEndedWithTwo);

String escapeJavaOneRemoveJustIfEndedWithThree = escapeJavaOne.removeEndIgnoreCase('.COM"');
System.assertEquals('Company: "Salesforce', escapeJavaOneRemoveJustIfEndedWithThree);

String escapeJavaOneRemoveJustIfStartedWith = escapeJavaOne.removeStart('Company');
System.assertEquals(': "Salesforce.com"', escapeJavaOneRemoveJustIfStartedWith);

String escapeJavaOneRemoveJustIfStartedWithTwo = escapeJavaOne.removeStartIgnoreCase('COMPANY');
System.assertEquals(': "Salesforce.com"', escapeJavaOneRemoveJustIfStartedWithTwo);

//repeat
String alphabetSixRepeat = alphabetSix.repeat(3);
System.assertEquals('abcdefabcdefabcdef', alphabetSixRepeat);

String alphabetSixRepeatWith = alphabetSix.repeat('-', 2);
System.assertEquals('abcdef-abcdef', alphabetSixRepeatWith);

//replace
String alphabetSixReplace = alphabetSix.replace(target, replacement);
System.assertEquals('axydef', alphabetSixReplace);

String alphabetSixReplaceAll = alphabetSix.replaceAll(regExp, replacementTwo);
System.assertEquals('111111', alphabetSixReplaceAll);

String alphabetSixReplaceFirst = alphabetSix.replaceFirst(regExpTwo, replacementThree);
System.assertEquals('f', alphabetSixReplaceFirst);

//reverse
String alphabetSixReverse = alphabetSix.reverse();
System.assertEquals('fedcba', alphabetSixReverse);
System.debug('String: ' +alphabetSix);
System.debug('Reversed String: ' +alphabetSixReverse);

//right
String getLevenshteinDistanceJoeRight = getLevenshteinDistanceJoe.right(3);
System.assertEquals('Joe', getLevenshteinDistanceJoeRight);

String alphabetSixRight = alphabetSix.rightPad(12, alphabetNextSix);
System.assertEquals('abcdefghijkl', alphabetSixRight);

//split - I don't get it, so I will come back when I learned

//startsWith
System.assert(alphabetSix.startsWith('abcdef'));
System.assert(alphabetSix.startsWithIgnoreCase('ABCDEF'));

//stripHtmlTags
String originalHtmlFourWithoutHtml = originalHtmlFour.stripHtmlTags();
System.assertEquals('""', originalHtmlFourWithoutHtml);

//substring
System.assertEquals('cdefabcdef', sameAlphabetWithRepeat.substring(2));

'abcdef'.substring(1, 4); // Returns "bcde"

String sameAlphabetWithRepeatSubstringAfter = sameAlphabetWithRepeat.substringAfter('c');
System.assertEquals('defabcdef', sameAlphabetWithRepeatSubstringAfter);

String sameAlphabetWithRepeatSubstringAfterLast = sameAlphabetWithRepeat.substringAfterLast('c');
System.assertEquals('def', sameAlphabetWithRepeatSubstringAfterLast);

String sameAlphabetWithRepeatSubstringBefore = sameAlphabetWithRepeat.substringBefore('c');
System.assertEquals('ab', sameAlphabetWithRepeatSubstringBefore);

String sameAlphabetWithRepeatSubstringBeforeLast = sameAlphabetWithRepeat.substringBeforeLast('c');
System.assertEquals('abcdefab', sameAlphabetWithRepeatSubstringBeforeLast);

String sameAlphabetWithRepeatSubstringBetween = sameAlphabetWithRepeat.substringBetween('c');
System.assertEquals('defab', sameAlphabetWithRepeatSubstringBetween);

//swapCase
String getLevenshteinDistanceJoeSwapCase = getLevenshteinDistanceJoe.swapCase();
System.assertEquals('hELLO jOE', getLevenshteinDistanceJoeSwapCase);

//toLowerCase
System.assertEquals('hello joe', getLevenshteinDistanceJoe.toLowerCase());

//toUpperCase
System.assertEquals('HELLO JOE', getLevenshteinDistanceJoe.toUpperCase());

//trim
String sameAlphabetWithSpaceTwoTrimmed = sameAlphabetWithSpaceTwo.trim();
System.assertEquals('a b c d e f', sameAlphabetWithSpaceTwoTrimmed);

//valueOf
String objectTwoValueOf = String.valueOf(objectTwo);
System.debug('Result: ' +objectTwoValueOf); //convert date, date time, decimal, double, interger, long, object