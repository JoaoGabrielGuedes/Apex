//Laplace continuation because even html can't take such a mess
//Strings
String hi = 'Hello World!';
String explainying = 'I\'m studying Salesforce Apex Salesforce!\n So I decided to create this code for apply my knowledge in the framework.\n This will be probaly long and useless for anyone other than me :D';
String bTw = 'I will be refactoring from time to time, so dont worry :D';
String alphabetSix = 'abcdef';
String alphabetNextSix = 'ghijkl';
String sameAlphabet = 'abcdef';
String sameAlphabetDivided = 'abc';
String alphabetIntersection = 'defghi';
String sameAlphabetWithCase = 'ABCDEF';
String sameAlphabetWithSpace = 'a b c d e f';
String sameAlphabetWithSpaceTwo = '   a b c d e f   ';
String sameAlphabetWithSpaceThree = ' a                b c d e f';
String sameAlphabetWithRepeat = 'abcdefabcdef';
String sameAlphabetWithNumbers = 'abcdef 27';
String sameAlphabetWithNumbersWithoutSpace = 'abcdef27';
String especialAlphabet = 'aA$Bb';
String stringValueFifthteen = '001D000000Ju1zH';
String stringComma = 'String1, "String2"';
String originalHtmlFour = '"<Black&White>"';
String escapeEcmaOne = '"grade": 3.9/4.0';
String escapeJavaOne = 'Company: "Salesforce.com"';
String escapeSinglesQuotesOne = '\'Hello Jason\'';
String escapeUnicodeOne = 'De onde você é?';
String templateformat = '{0} was last updated {1}';
String getLevenshteinDistanceJoe = 'Hello Joe';
String getLevenshteinDistanceJane = 'Hello Jane';
String asciiTable = 'abcd1234!@#$%^&*()`~-_+={[}]|:<,>.?';
String notAsciiTable = '√';
String blank = '';
String nullString = null;
String whitespace = '  ';
String numeric = '1234567890';
String decimalPoint = '1.2';
String numericSpace = '1 2 3';
String theyLoveOmega = '\u03A9 is Ω (Omega)';
String theyReallyLoveOmega = 'Ω and \u03A9 and Ω';
String target = 'bc';
String replacement = 'xy';
String regExp = '[a-z]';
String replacementTwo = '1';
String regExpTwo = '[a-z]{6}';
String replacementThree = 'f';

//Objects
Object objectOne = 'abcdef';

//Integers
Integer objectTwo = 300;

//Id's
Id idValueFifthteen = '001D000000Ju1zH';
Id idValueEitghteen = '001D000000Ju1zHIAR';

//Lists
List<Object> parameters = new List<Object> {'Universal Containers', DateTime.newInstance(2023, 04, 21) };
List<Integer> charArr= new Integer[]{74}; //J in ASCII
List<String> commonPrefixOne = new List<String>{'System.debug', 'System.assert', 'System.assertEquals'};
List<Integer> joinOne = new List<Integer> {10, 20, 30};

//offsetByCodePoints
System.assertEquals(4, sameAlphabet.offsetByCodePoints(0,4)); //need to study

//remove
String escapeJavaOneRemove = escapeJavaOne.remove('force');
System.assertEquals('Company: "Sales.com"', escapeJavaOneRemove);

String escapeJavaOneRemoveJustIfEndedWith = escapeJavaOne.removeEnd('force');
System.assertEquals('Company: "Salesforce.com"', escapeJavaOneRemoveJustIfEndedWith);

String escapeJavaOneRemoveJustIfEndedWithTwo = escapeJavaOne.removeEnd('.com"');
System.assertEquals('Company: "Salesforce', escapeJavaOneRemoveJustIfEndedWithTwo);

String escapeJavaOneRemoveJustIfEndedWithThree = escapeJavaOne.removeEndIgnoreCase('.COM"');
System.assertEquals('Company: "Salesforce', escapeJavaOneRemoveJustIfEndedWithThree);

String escapeJavaOneRemoveJustIfStartedWith = escapeJavaOne.removeStart('Company');
System.assertEquals(': "Salesforce.com"', escapeJavaOneRemoveJustIfStartedWith);

String escapeJavaOneRemoveJustIfStartedWithTwo = escapeJavaOne.removeStartIgnoreCase('COMPANY');
System.assertEquals(': "Salesforce.com"', escapeJavaOneRemoveJustIfStartedWithTwo);

//repeat
String alphabetSixRepeat = alphabetSix.repeat(3);
System.assertEquals('abcdefabcdefabcdef', alphabetSixRepeat);

String alphabetSixRepeatWith = alphabetSix.repeat('-', 2);
System.assertEquals('abcdef-abcdef', alphabetSixRepeatWith);

//replace
String alphabetSixReplace = alphabetSix.replace(target, replacement);
System.assertEquals('axydef', alphabetSixReplace);

String alphabetSixReplaceAll = alphabetSix.replaceAll(regExp, replacementTwo);
System.assertEquals('111111', alphabetSixReplaceAll);

String alphabetSixReplaceFirst = alphabetSix.replaceFirst(regExpTwo, replacementThree);
System.assertEquals('f', alphabetSixReplaceFirst);

//reverse
String alphabetSixReverse = alphabetSix.reverse();
System.assertEquals('fedcba', alphabetSixReverse);
System.debug('String: ' +alphabetSix);
System.debug('Reversed String: ' +alphabetSixReverse);

//right
String getLevenshteinDistanceJoeRight = getLevenshteinDistanceJoe.right(3);
System.assertEquals('Joe', getLevenshteinDistanceJoeRight);

String alphabetSixRight = alphabetSix.rightPad(12, alphabetNextSix);
System.assertEquals('abcdefghijkl', alphabetSixRight);

//split - I don't get it, so I will come back when I learned

//startsWith
System.assert(alphabetSix.startsWith('abcdef'));
System.assert(alphabetSix.startsWithIgnoreCase('ABCDEF'));

//stripHtmlTags
String originalHtmlFourWithoutHtml = originalHtmlFour.stripHtmlTags();
System.assertEquals('""', originalHtmlFourWithoutHtml);

//substring
System.assertEquals('cdefabcdef', sameAlphabetWithRepeat.substring(2));

'abcdef'.substring(1, 4); // Returns "bcde"

String sameAlphabetWithRepeatSubstringAfter = sameAlphabetWithRepeat.substringAfter('c');
System.assertEquals('defabcdef', sameAlphabetWithRepeatSubstringAfter);

String sameAlphabetWithRepeatSubstringAfterLast = sameAlphabetWithRepeat.substringAfterLast('c');
System.assertEquals('def', sameAlphabetWithRepeatSubstringAfterLast);

String sameAlphabetWithRepeatSubstringBefore = sameAlphabetWithRepeat.substringBefore('c');
System.assertEquals('ab', sameAlphabetWithRepeatSubstringBefore);

String sameAlphabetWithRepeatSubstringBeforeLast = sameAlphabetWithRepeat.substringBeforeLast('c');
System.assertEquals('abcdefab', sameAlphabetWithRepeatSubstringBeforeLast);

String sameAlphabetWithRepeatSubstringBetween = sameAlphabetWithRepeat.substringBetween('c');
System.assertEquals('defab', sameAlphabetWithRepeatSubstringBetween);

//swapCase
String getLevenshteinDistanceJoeSwapCase = getLevenshteinDistanceJoe.swapCase();
System.assertEquals('hELLO jOE', getLevenshteinDistanceJoeSwapCase);

//toLowerCase
System.assertEquals('hello joe', getLevenshteinDistanceJoe.toLowerCase());

//toUpperCase
System.assertEquals('HELLO JOE', getLevenshteinDistanceJoe.toUpperCase());

//trim
String sameAlphabetWithSpaceTwoTrimmed = sameAlphabetWithSpaceTwo.trim();
System.assertEquals('a b c d e f', sameAlphabetWithSpaceTwoTrimmed);

//valueOf
String objectTwoValueOf = String.valueOf(objectTwo);
System.debug('Result: ' +objectTwoValueOf); //convert date, date time, decimal, double, interger, long, object
