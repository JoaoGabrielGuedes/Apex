//Laplace continuation because even html can't take such a mess
//Strings
String hi = 'Hello World!';
String explainying = 'I\'m studying Salesforce Apex Salesforce!\n So I decided to create this code for apply my knowledge in the framework.\n This will be probaly long and useless for anyone other than me :D';
String bTw = 'I will be refactoring from time to time, so dont worry :D';
String alphabetSix = 'abcdef';
String alphabetNextSix = 'ghijkl';
String sameAlphabet = 'abcdef';
String sameAlphabetDivided = 'abc';
String alphabetIntersection = 'defghi';
String sameAlphabetWithCase = 'aBcdEf';
String sameAlphabetWithSpace = 'a b c d e f';
String sameAlphabetWithRepeat = 'abcdefabcdef';
String stringValueFifthteen = '001D000000Ju1zH';
String stringComma = 'String1, "String2"';
String originalHtmlFour = '"<Black&White>"';
String escapeEcmaOne = '"grade": 3.9/4.0';
String escapeJavaOne = 'Company: "Salesforce.com"';
String escapeSinglesQuotesOne = '\'Hello Jason\'';
String escapeUnicodeOne = 'De onde você é?';
String templateformat = '{0} was last updated {1}';
String getLevenshteinDistanceJoe= 'Hello Joe';
String getLevenshteinDistanceJane = 'Hello Jane';

//Objects
Object objectOne = 'abcdef';

//Integers
Integer objectTwo = 300;

//Id's
Id idValueFifthteen = '001D000000Ju1zH';
Id idValueEitghteen = '001D000000Ju1zHIAR';

//Lists
List<Object> parameters = new List<Object> {'Universal Containers', DateTime.newInstance(2023, 04, 21) };
List<Integer> charArr= new Integer[]{74}; //J in ASCII
List<String> commonPrefixOne = new List<String>{'System.debug', 'System.assert', 'System.assertEquals'};

//getLevenshteinDistance
Integer getLevenshteinDistanceOne = getLevenshteinDistanceJoe.getLevenshteinDistance('Hello Max');
System.assertEquals(3, getLevenshteinDistanceOne);
Integer getLevenshteinDistanceTwo = getLevenshteinDistanceJane.getLevenshteinDistance('Hello Max', 2);
System.assertEquals(-1, getLevenshteinDistanceTwo);

//indexOf
Integer sameAlphabetContained = alphabetSix.indexOf(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetContained);

//hashCode - I get it but can't manipulate it so I need to study further
public class MyCustomClass {
   String x,y;
   // Provide a custom hash code
   public Integer hashCode() {
    return 
    (31*x.hashCode())^(y.hashCode());
   }
}

//indexOf - I need to study further
Integer sameAlphabetIndexOne = alphabetSix.indexOf(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetIndexOne);
Integer sameAlphabetIndexTwo = alphabetSix.indexOf(sameAlphabetDivided, 2);
System.assertEquals(-1, sameAlphabetIndexTwo);
Integer sameAlphabetIndexThree = alphabetSix.indexOfAny(alphabetNextSix);
System.assertEquals(-1, sameAlphabetIndexThree);
Integer sameAlphabetIndexFour = alphabetSix.indexOfAny(sameAlphabetDivided);
System.assertEquals(0, sameAlphabetIndexFour);


