//I will coment this a lot
//Necessary data

//Strings
String hi = 'Hello World!';
String explainying = 'I\'m studying Salesforce Apex Salesforce!\n So I decided to create this code for apply my knowledge in the framework.\n This will be probaly long and useless for anyone other than me :D';
String bTw = 'I will be refactoring from time to time, so dont worry :D';
String alphabetSix = 'abcdef';
String alphabetNextSix = 'ghijk';
String sameAlphabet = 'abcdef';
String alphabetIntersection = 'defghi';
String sameAlphabetWithCase = 'aBcdEf';
String sameAlphabetWithSpace = 'a b c d e f';
String sameAlphabetWithRepeat = 'abcdefabcdef';
String stringValueFifthteen = '001D000000Ju1zH';
String stringComma = 'String1, "String2"';
String originalHtmlFour = '"<Black&White>"';
String escapeEcmaOne = '"grade": 3.9/4.0';
String escapeJavaOne = 'Company: "Salesforce.com"';
String escapeSinglesQuotesOne = '\'Hello Jason\'';
String escapeUnicodeOne = 'De onde você é?';
String templateformat = '{0} was last updated {1}';

//Objects
Object objectOne = 'abcdef';
//Integers
Integer objectTwo = 300;
//Id's
Id idValueFifthteen = '001D000000Ju1zH';
Id idValueEitghteen = '001D000000Ju1zHIAR';
//Lists?
List<Object> parameters = new List<Object> {'Universal Containers', DateTime.newInstance(2023, 04, 21) };
List<Integer> charArr= new Integer[]{74}; //J in ASCII
List<String> commonPrefixOne = new List<String>{'System.debug', 'System.assert', 'System.assertEquals'};

System.debug(hi);
System.debug(explainying);
System.debug(bTw);

//primitive data types
Boolean isThisAdream = false;
System.debug(isThisAdream);

Integer universeAndLifeNumber = 42;
System.debug(universeAndLifeNumber);

Long guessWhat = 0110111001101111L;
System.debug(guessWhat);

Double pi = 6.28318530717958647692/2;
System.debug(pi);

Date bestDay = Date.newInstance(1996, 2, 11);
System.debug(bestDay);

Time currentTime = Time.newInstance(21, 47, 0, 0);
System.debug(currentTime);

DateTime currentDateTime = DateTime.newInstance(2023, 4, 20, 21, 47, 0);
System.debug(currentDateTime);

//a list with something I know
List<String> knowledge = new List<String>{'System.debug', 'Seven', 'Potato', 'Class'};
  knowledge.add('List'); 
  knowledge.add('Map');
  knowledge.add('Add');
  knowledge.add('Remove');
  knowledge.remove(2);
  knowledge.set(1, 'Set');
System.debug(knowledge);

//This is null?

String iAm;
System.debug(iAm);

Boolean sleepy;
System.debug(sleepy);

Integer but;
System.debug(but);

Long my;
System.debug(my);

Double study;
System.debug(study);

Date willNot;
System.debug(willNot);

Time stop;
System.debug(stop);

String whatIs = 'Why do I find this funny? Hahahaha';
String capitalizeIsSelfish = 'i will creat this just for capitalize';
System.debug('Actual String: ' +whatIs);

//abbreviate and Abbreviate plus offset
System.debug('This is a abbreviated String: ' +whatIs.abbreviate(20));
System.debug('This is a abbreviated² String: ' +whatIs.abbreviate(10));
System.debug('This is a abbreviated³ String: ' +whatIs.abbreviate(5));
System.debug('I dont know what this is anymore: ' +whatIs.abbreviate(4)); //nevermind, there is a min of 4 letters                        
System.debug(whatIs.abbreviate(10,5)); //offset

//uncapitalize
System.debug('Actual String: ' +whatIs);
System.debug('Uncapitalized String: ' +whatIs.uncapitalize());
System.debug('If I call it again will be uncapitalizade? I guess that will not but here it is: ' +whatIs);

//capitalize
System.debug('Actual String: ' +capitalizeIsSelfish);
System.debug('Capitalize: ' +capitalizeIsSelfish.capitalize());

//center
String whatsThat = 'This';
System.debug(whatsThat.center(30));

//padded
System.debug(whatsThat.center(10, '-'));

//charAt
System.debug(hi.charAt(6)); //return value of the character ASCII

//codePointAt - I need to study this further
System.debug(hi.codePointAt(6));

//codePointBefore - This too
System.debug(hi.codePointBefore(6));

//codePointBefore - ....
System.debug(hi.codePointCount(6,10));

//compareTo
Integer result = 
    alphabetSix.compareTo(alphabetNextSix);
System.assertEquals(result, -6);

Integer resultTwo = 
    alphabetSix.compareTo(sameAlphabet);
System.assertEquals(resultTwo, 0);

Integer resultThree = 
    alphabetSix.compareTo(alphabetIntersection);
System.assertEquals(resultThree, -3);

//contains
Boolean resultBool =
    alphabetSix.contains(sameAlphabet);
System.assertEquals(resultBool, true);

//containsAny
Boolean resultBoolTwo =
    alphabetSix.containsAny(alphabetIntersection);
System.assertEquals(resultBoolTwo, true);

Boolean resultBoolThree =
    alphabetSix.containsAny(alphabetNextSix);
System.assertEquals(resultBoolThree, false);

//containsIgnoreCase
Boolean resultBoolFour =
    alphabetSix.containsIgnoreCase(sameAlphabetWithCase);
System.assertEquals(resultBoolFour, true);

//containsNone
Boolean resultBoolFive =
    alphabetSix.containsNone(alphabetNextSix);
System.assertEquals(resultBoolFive, true);

//containsOnly
Boolean resultBoolSix =
    alphabetSix.containsOnly('abc');
System.assertEquals(resultBoolSix, false);

Boolean resultBoolSeven =
    alphabetSix.containsOnly('abcfgh');
System.assertEquals(resultBoolSeven, false);

Boolean resultBoolEight =
    alphabetSix.containsOnly('abcdef');
System.assertEquals(resultBoolEight, true);

//containsWhiteSpace
System.assert(sameAlphabetWithSpace.containsWhitespace());

//countMatches
System.assertEquals(1, alphabetSix.countMatches('abcdef'));
System.assertEquals(2, sameAlphabetWithRepeat.countMatches('abcdef'));

//deleteWhitespace
System.assertEquals(alphabetSix, sameAlphabetWithSpace.deleteWhitespace());

//difference
String alphabetDifference = 
   alphabetSix.difference('abcxyz');
System.assertEquals(
   'xyz',
   alphabetDifference);

//endsWith
System.assert(hi.endsWith('World!'));
System.assert(hi.endsWithIgnoreCase('world!'));

//compare a string to an object
Boolean resultEqualsObAlp = alphabetSix.equals(objectOne);
System.assertEquals(true, resultEqualsObAlp);

//compare a string to an object containing a number
Boolean resultEqualsObAlpThree = alphabetSix.equals(objectTwo);
System.assertEquals(false, resultEqualsObAlpThree);

//compare a string to an ID of the same length
//upper case is accounted
Boolean resultEqualsObAlpFour = stringValueFifthteen.equals(idValueFifthteen);
System.assertEquals(true, resultEqualsObAlpFour); 

//compare two equal ID values of different lengths
Boolean resultEqualsObAlpFive = stringValueFifthteen.equals(idValueEitghteen);
System.assertEquals(true, resultEqualsObAlpFive);

//compare while ignoring case
Boolean resultEqualsObAlpSix = 
alphabetSix.equalsIgnoreCase(sameAlphabetWithCase);
System.assertEquals(resultEqualsObAlpSix, true);

//escapeCsv - need to study further 
String stringCommaTwo = stringComma.escapeCsv();
System.assertEquals('"String1, ""String2"""', stringCommaTwo);

//escapeHtml4
String escapedHtmlFour = originalHtmlFour.escapeHtml4();
System.debug('Original HTML4 '+originalHtmlFour);
System.debug('Escaped HTML4 ' +escapedHtmlFour);

//escapeEcma
String escapedEcmaOne = escapeEcmaOne.escapeEcmaScript();
System.debug(escapedEcmaOne);
System.assertEquals('\\"grade\\": 3.9\\/4.0', escapedEcmaOne);

//escapeJava
String escapedJavaOne = escapeJavaOne.escapeJava();
System.assertEquals('Company: \\"Salesforce.com\\"', escapedJavaOne);

//escapeSingleQuotes
String escapedSinglesQuotesOne = String.escapeSingleQuotes(escapeSinglesQuotesOne);
System.debug(escapedSinglesQuotesOne); 
System.assertEquals('\\\'Hello Jason\\\'', escapedSinglesQuotesOne);

//escapeUnicode
String escapedUnicodeOne = escapeUnicodeOne.escapeUnicode();
System.assertEquals('De onde voc\\u00EA \\u00E9?', escapedUnicodeOne);

//escapeXml
String escapedXmlOne = originalHtmlFour.escapeXml();
System.debug(escapedXmlOne);

//Format - this will be further explored latter on
String templateformatted = String.format(templateformat, parameters);
System.debug ('Newly formatted string:' + templateformatted);

//fromCharArray
String convertedChar = String.fromCharArray(charArr);
System.assertEquals('J', convertedChar);

//getChars
Integer[] chars = hi.getChars();
System.assertEquals(72, chars[0]);

//getCommonPrefix
String prefixOne = String.getCommonPrefix(commonPrefixOne);
System.assertEquals('System.', prefixOne);